import{C as l,r as E,E as o,B as f,A as m,e as A,b as j,j as n}from"./CachedExtensionsStore.BR3g8_I7.js";import{d as z}from"./index.BFANTigx.js";import"./index.CakdKvcd.js";let b;const O=new Promise(t=>{b=t});async function p(t,s){var d;const i={},r=await O;for(const e of Object.values(t)){const N={...e};if(e.installed=E(e.injectedName),r&&e.installed&&e.authorized===o.Authorized){const c=new f(r,m);try{await c.connect(e.injectedName);const a=await c.getAccounts(),h=(d=A)==null?void 0:d[e.injectedName],u={...e,...h,connector:c,accounts:a};i[u.injectedName]=u,e.authorized=o.Authorized}catch(a){if(a instanceof j)switch(a.reason){case n.UNKNOWN:case n.PENDING_AUTH:e.authorized=o.None;break;case n.NO_ACCOUNTS_AUTHORIZED:case n.UNAUTHORIZED:e.authorized=o.Rejected;break;case n.NO_EXTENSION:e.installed=!1;break}console.error(a)}}(N.authorized!==e.authorized||N.installed!==e.installed)&&l.updateExtension(e)}s(i)}const T=z([l],([t],s)=>{p(t,s)},{});export{T as C,b as r};
