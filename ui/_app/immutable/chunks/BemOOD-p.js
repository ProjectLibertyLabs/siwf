import{w as u}from"./BD0tBxJa.js";const g={rpc:{checkDelegations:{description:"Test a list of MSAs to see if they have delegated to the provider MSA",params:[{name:"delegator_msa_ids",type:"Vec<DelegatorId>"},{name:"provider_msa_id",type:"ProviderId"},{name:"block_number",type:"BlockNumber"},{name:"schema_id",type:"Option<SchemaId>"}],type:"Vec<(DelegatorId, bool)>"},grantedSchemaIdsByMsaId:{description:"Fetch the list of schema ids that a delegator has granted to provider",params:[{name:"delegator_msa_id",type:"DelegatorId"},{name:"provider_msa_id",type:"ProviderId"}],type:"Option<Vec<SchemaGrantResponse>>"},getKeysByMsaId:{description:"Fetch Keys for an MSA Id",params:[{name:"msa_id",type:"MessageSourceId"}],type:"Option<KeyInfoResponse>"},getAllGrantedDelegationsByMsaId:{description:"Get the list of all delegated providers with schema permission grants",params:[{name:"delegator_msa_id",type:"DelegatorId"}],type:"Vec<DelegationResponse>"}},types:{MessageSourceId:"u64",DelegatorId:"MessageSourceId",ProviderId:"MessageSourceId",KeyInfoResponse:{msa_keys:"Vec<AccountId>",msa_id:"MessageSourceId"},SchemaGrantResponse:{schema_id:"SchemaId",revoked_at:"BlockNumber"},DelegationResponse:{provider_id:"ProviderId",permissions:"Vec<SchemaGrantResponse>"},CommonPrimitivesMsaDelegatorId:"u64",CommonPrimitivesMsaProviderId:"u64"}},y={rpc:{getBySchemaId:{description:"Get messages by schemaId paginated",params:[{name:"schema_id",type:"SchemaId"},{name:"pagination",type:"BlockPaginationRequest"}],type:"BlockPaginationResponseMessage"}},types:{BlockPaginationRequest:{from_block:"BlockNumber",from_index:"u32",to_block:"BlockNumber",page_size:"u32"},MessageResponse:{payload:"Option<Vec<u8>>",cid:"Option<Vec<u8>>",provider_msa_id:"MessageSourceId",msa_id:"Option<MessageSourceId>",index:"u16",block_number:"BlockNumber",payload_length:"Option<u32>"},BlockPaginationResponseMessage:{content:"Vec<MessageResponse>",has_next:"bool",next_block:"Option<BlockNumber>",next_index:"Option<u32>"}}},h={rpc:{getBySchemaId:{description:"Get a Schema by Id",params:[{name:"schema_id",type:"SchemaId"}],type:"Option<SchemaResponse>"},checkSchemaValidity:{description:"",params:[{name:"model",type:"SchemaModel"},{name:"at",type:"BlockHash",isOptional:!0}],type:"bool"},getVersions:{description:"Get different versions and schema ids for a complete schema name or only a namespace",params:[{name:"schema_name",type:"String"}],type:"Option<Vec<SchemaVersionResponse>>"}},types:{SchemaId:"u16",SchemaModel:"Vec<u8>",SchemaVersion:"u8",SchemaResponse:{schema_id:"SchemaId",model:"SchemaModel",model_type:"ModelType",payload_location:"PayloadLocation",settings:"Vec<SchemaSetting>"},ModelType:{_enum:["AvroBinary","Parquet"]},PayloadLocation:{_enum:["OnChain","IPFS","Itemized","Paginated"]},SchemaSetting:{_enum:["AppendOnly","SignatureRequired"]},SchemaVersionResponse:{schema_name:"String",schema_version:"SchemaVersion",schema_id:"SchemaId"}}},S={rpc:{getPaginatedStorage:{description:"Gets pages of stateful storage",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"Vec<PaginatedStorageResponse>"},getItemizedStorage:{description:"Gets itemized of stateful storage",params:[{name:"msa_id",type:"MessageSourceId"},{name:"schema_id",type:"SchemaId"}],type:"ItemizedStoragePageResponse"}},types:{PageId:"u16",PageHash:"u32",PageNonce:"u16",ItemizedStorageResponse:{index:"u16",payload:"Vec<u8>"},PaginatedStorageResponse:{page_id:"PageId",msa_id:"MessageSourceId",schema_id:"SchemaId",content_hash:"PageHash",nonce:"PageNonce",payload:"Vec<u8>"},ItemizedStoragePageResponse:{msa_id:"MessageSourceId",schema_id:"SchemaId",content_hash:"PageHash",nonce:"PageNonce",items:"Vec<ItemizedStorageResponse>"}}},_={rpc:{getHandleForMsa:{description:"Get handle for a given msa_id",params:[{name:"msa_id",type:"MessageSourceId"}],type:"Option<HandleResponse>"},getMsaForHandle:{description:"Get msa_id for a given handle",params:[{name:"display_handle",type:"String"}],type:"Option<MessageSourceId>"},getNextSuffixes:{description:"Get next suffixes for a given handle and count",params:[{name:"base_handle",type:"String"},{name:"count",type:"u16"}],type:"PresumptiveSuffixesResponse"},validateHandle:{description:"Check whether the supplied handle passes all the checks performed by claim_handle call.",params:[{name:"base_handle",type:"String"}],type:"bool"}},types:{HandleSuffix:"u16",HandleResponse:{base_handle:"String",canonical_base:"String",suffix:"u16"},PresumptiveSuffixesResponse:{suffixes:"Vec<HandleSuffix>",base_handle:"String"}}},I={rpc:{getEvents:{description:"Get block Events",params:[{name:"at",type:"H256"}],type:"Vec<RpcEvent>"},getMissingNonceValues:{description:"Get missing nonce values for an account",params:[{name:"account",type:"AccountId32"}],type:"Vec<Index>"}},types:{RpcEvent:{phase:"Option<u32>",pallet:"u8",event:"u8",data:"Vec<u8>"},SpConsensusSlotsSlotDuration:"u64"}},f={rpc:{computeCapacityFeeDetails:{description:"Compute the capacity fee details for a given transaction",params:[{name:"encoded_xt",type:"Vec<u8>"},{name:"at",type:"Option<BlockHash>"}],type:"FeeDetails"}},types:{}},R={rpc:{dummy:{description:"This API has no custom RPCs",params:[],type:"undefined"}},types:{RewardEra:"u32",UnclaimedRewardInfo:{reward_era:"RewardEra",expires_at_block:"BlockNumber",staked_amount:"Balance",eligible_amount:"Balance",earned_amount:"Balance"}}},l=Object.freeze(Object.defineProperty({__proto__:null,capacity:R,frequency:I,frequencyTxPayment:f,handles:_,messages:y,msa:g,schemas:h,statefulStorage:S},Symbol.toStringTag,{value:"Module"})),b={transactionWatch_v1:{submitAndWatch:{description:"",type:"",params:[]},unwatch:{description:"",type:"",params:[]}},transaction_v1:{broadcast:{description:"",type:"",params:[]},stop:{description:"",type:"",params:[]}},chainHead_v1:{body:{description:"",type:"",params:[]},call:{description:"",type:"",params:[]},continue:{description:"",type:"",params:[]},follow:{description:"",type:"",params:[]},header:{description:"",type:"",params:[]},stopOperation:{description:"",type:"",params:[]},storage:{description:"",type:"",params:[]},unfollow:{description:"",type:"",params:[]},unpin:{description:"",type:"",params:[]}}};Object.entries(l).reduce((n,[p,a])=>({...n,...a.types}),{});Object.entries(l).reduce((n,[p,a])=>({...n,[p]:a.rpc}),{...b});function v(){const{subscribe:n,set:p,update:a}=u({request:{frequencyRpcUrl:"",providerId:"",providerName:"",isNewProvider:!0,requiredSchemas:[],missingSchemas:[],allSchemasToGrant:[]}});return{set:p,subscribe:n,update:a,updateDelegation:(s,e,t)=>a(o=>({...o,request:{...o.request,isNewProvider:s,missingSchemas:e,allSchemasToGrant:t}})),upsertExtrinsic:s=>a(e=>{var r,c,d;const t=((c=(r=e==null?void 0:e.response)==null?void 0:r.signUp)==null?void 0:c.extrinsics)||[],o=t.find(i=>i.pallet===s.pallet&&i.extrinsicName===s.extrinsicName);return o?o.encodedExtrinsic=s.encodedExtrinsic:t.push(s),t.sort((i,m)=>i.pallet===m.pallet?0:i.pallet==="msa"?-1:m.pallet==="msa"?1:0),{...e,response:{...e==null?void 0:e.response,signUp:{...(d=e==null?void 0:e.response)==null?void 0:d.signUp,extrinsics:t}}}}),updateSignInResponse:s=>a(e=>({...e,response:{...e.response,signIn:s}}))}}const M=v();export{M as R};
